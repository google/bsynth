// Generated by rstantools.  Do not edit by hand.

/*
    bsynth is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bsynth is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bsynth.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_factor_model_without_covariates_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 135> locations_array__ =
  {" (found before start of program)",
  " (in 'factor_model_without_covariates', line 133, column 2 to column 18)",
  " (in 'factor_model_without_covariates', line 134, column 2 to column 24)",
  " (in 'factor_model_without_covariates', line 135, column 2 to column 30)",
  " (in 'factor_model_without_covariates', line 136, column 2 to column 24)",
  " (in 'factor_model_without_covariates', line 137, column 2 to column 31)",
  " (in 'factor_model_without_covariates', line 138, column 2 to column 37)",
  " (in 'factor_model_without_covariates', line 139, column 2 to column 29)",
  " (in 'factor_model_without_covariates', line 140, column 2 to column 41)",
  " (in 'factor_model_without_covariates', line 141, column 2 to column 31)",
  " (in 'factor_model_without_covariates', line 142, column 2 to column 22)",
  " (in 'factor_model_without_covariates', line 143, column 2 to column 28)",
  " (in 'factor_model_without_covariates', line 144, column 2 to column 20)",
  " (in 'factor_model_without_covariates', line 147, column 2 to line 151, column 44)",
  " (in 'factor_model_without_covariates', line 152, column 2 to column 32)",
  " (in 'factor_model_without_covariates', line 153, column 2 to column 44)",
  " (in 'factor_model_without_covariates', line 180, column 2 to column 22)",
  " (in 'factor_model_without_covariates', line 182, column 11 to column 12)",
  " (in 'factor_model_without_covariates', line 182, column 14 to column 15)",
  " (in 'factor_model_without_covariates', line 182, column 4 to column 49)",
  " (in 'factor_model_without_covariates', line 183, column 11 to column 12)",
  " (in 'factor_model_without_covariates', line 183, column 14 to column 22)",
  " (in 'factor_model_without_covariates', line 183, column 4 to line 185, column 45)",
  " (in 'factor_model_without_covariates', line 187, column 6 to column 69)",
  " (in 'factor_model_without_covariates', line 186, column 4 to line 187, column 69)",
  " (in 'factor_model_without_covariates', line 181, column 2 to line 188, column 3)",
  " (in 'factor_model_without_covariates', line 156, column 2 to column 37)",
  " (in 'factor_model_without_covariates', line 157, column 2 to column 24)",
  " (in 'factor_model_without_covariates', line 158, column 2 to column 25)",
  " (in 'factor_model_without_covariates', line 159, column 2 to column 23)",
  " (in 'factor_model_without_covariates', line 160, column 2 to column 25)",
  " (in 'factor_model_without_covariates', line 161, column 2 to column 23)",
  " (in 'factor_model_without_covariates', line 162, column 2 to column 25)",
  " (in 'factor_model_without_covariates', line 163, column 2 to column 23)",
  " (in 'factor_model_without_covariates', line 165, column 11 to column 12)",
  " (in 'factor_model_without_covariates', line 165, column 14 to column 15)",
  " (in 'factor_model_without_covariates', line 165, column 4 to column 48)",
  " (in 'factor_model_without_covariates', line 166, column 15 to column 16)",
  " (in 'factor_model_without_covariates', line 166, column 4 to column 30)",
  " (in 'factor_model_without_covariates', line 167, column 25 to column 33)",
  " (in 'factor_model_without_covariates', line 167, column 15 to column 16)",
  " (in 'factor_model_without_covariates', line 167, column 4 to column 35)",
  " (in 'factor_model_without_covariates', line 168, column 4 to line 169, column 40)",
  " (in 'factor_model_without_covariates', line 170, column 4 to line 171, column 36)",
  " (in 'factor_model_without_covariates', line 173, column 8 to line 176, column 42)",
  " (in 'factor_model_without_covariates', line 172, column 4 to line 176, column 42)",
  " (in 'factor_model_without_covariates', line 164, column 2 to line 177, column 3)",
  " (in 'factor_model_without_covariates', line 98, column 2 to column 17)",
  " (in 'factor_model_without_covariates', line 99, column 2 to column 17)",
  " (in 'factor_model_without_covariates', line 100, column 13 to column 14)",
  " (in 'factor_model_without_covariates', line 100, column 2 to column 30)",
  " (in 'factor_model_without_covariates', line 102, column 2 to column 17)",
  " (in 'factor_model_without_covariates', line 103, column 29 to column 30)",
  " (in 'factor_model_without_covariates', line 103, column 13 to column 14)",
  " (in 'factor_model_without_covariates', line 103, column 2 to column 32)",
  " (in 'factor_model_without_covariates', line 105, column 2 to column 22)",
  " (in 'factor_model_without_covariates', line 106, column 35 to column 36)",
  " (in 'factor_model_without_covariates', line 106, column 13 to column 19)",
  " (in 'factor_model_without_covariates', line 106, column 2 to column 38)",
  " (in 'factor_model_without_covariates', line 109, column 2 to column 21)",
  " (in 'factor_model_without_covariates', line 110, column 2 to column 21)",
  " (in 'factor_model_without_covariates', line 111, column 2 to column 49)",
  " (in 'factor_model_without_covariates', line 112, column 13 to column 21)",
  " (in 'factor_model_without_covariates', line 112, column 2 to column 60)",
  " (in 'factor_model_without_covariates', line 113, column 9 to column 10)",
  " (in 'factor_model_without_covariates', line 113, column 2 to column 40)",
  " (in 'factor_model_without_covariates', line 114, column 25 to column 26)",
  " (in 'factor_model_without_covariates', line 114, column 13 to column 14)",
  " (in 'factor_model_without_covariates', line 114, column 2 to column 28)",
  " (in 'factor_model_without_covariates', line 115, column 33 to column 34)",
  " (in 'factor_model_without_covariates', line 115, column 13 to column 14)",
  " (in 'factor_model_without_covariates', line 115, column 2 to column 36)",
  " (in 'factor_model_without_covariates', line 116, column 39 to column 40)",
  " (in 'factor_model_without_covariates', line 116, column 13 to column 19)",
  " (in 'factor_model_without_covariates', line 116, column 2 to column 42)",
  " (in 'factor_model_without_covariates', line 117, column 9 to column 10)",
  " (in 'factor_model_without_covariates', line 117, column 2 to column 30)",
  " (in 'factor_model_without_covariates', line 118, column 9 to column 10)",
  " (in 'factor_model_without_covariates', line 118, column 2 to column 28)",
  " (in 'factor_model_without_covariates', line 119, column 2 to column 36)",
  " (in 'factor_model_without_covariates', line 120, column 2 to column 32)",
  " (in 'factor_model_without_covariates', line 121, column 13 to column 14)",
  " (in 'factor_model_without_covariates', line 121, column 2 to column 56)",
  " (in 'factor_model_without_covariates', line 123, column 4 to column 49)",
  " (in 'factor_model_without_covariates', line 124, column 4 to column 45)",
  " (in 'factor_model_without_covariates', line 125, column 4 to line 126, column 68)",
  " (in 'factor_model_without_covariates', line 127, column 4 to line 128, column 69)",
  " (in 'factor_model_without_covariates', line 129, column 4 to column 72)",
  " (in 'factor_model_without_covariates', line 122, column 17 to line 130, column 3)",
  " (in 'factor_model_without_covariates', line 122, column 2 to line 130, column 3)",
  " (in 'factor_model_without_covariates', line 133, column 9 to column 10)",
  " (in 'factor_model_without_covariates', line 135, column 14 to column 22)",
  " (in 'factor_model_without_covariates', line 137, column 9 to column 17)",
  " (in 'factor_model_without_covariates', line 137, column 19 to column 20)",
  " (in 'factor_model_without_covariates', line 138, column 27 to column 28)",
  " (in 'factor_model_without_covariates', line 140, column 27 to column 35)",
  " (in 'factor_model_without_covariates', line 141, column 13 to column 19)",
  " (in 'factor_model_without_covariates', line 143, column 18 to column 19)",
  " (in 'factor_model_without_covariates', line 144, column 9 to column 10)",
  " (in 'factor_model_without_covariates', line 147, column 9 to column 10)",
  " (in 'factor_model_without_covariates', line 147, column 12 to column 20)",
  " (in 'factor_model_without_covariates', line 152, column 9 to column 10)",
  " (in 'factor_model_without_covariates', line 153, column 14 to column 22)",
  " (in 'factor_model_without_covariates', line 180, column 9 to column 10)",
  " (in 'factor_model_without_covariates', line 51, column 2 to column 42)",
  " (in 'factor_model_without_covariates', line 52, column 2 to column 43)",
  " (in 'factor_model_without_covariates', line 53, column 9 to column 10)",
  " (in 'factor_model_without_covariates', line 53, column 12 to column 13)",
  " (in 'factor_model_without_covariates', line 53, column 2 to column 17)",
  " (in 'factor_model_without_covariates', line 55, column 2 to column 14)",
  " (in 'factor_model_without_covariates', line 58, column 4 to column 35)",
  " (in 'factor_model_without_covariates', line 60, column 6 to column 15)",
  " (in 'factor_model_without_covariates', line 61, column 6 to column 40)",
  " (in 'factor_model_without_covariates', line 59, column 25 to line 62, column 5)",
  " (in 'factor_model_without_covariates', line 59, column 4 to line 62, column 5)",
  " (in 'factor_model_without_covariates', line 57, column 17 to line 63, column 3)",
  " (in 'factor_model_without_covariates', line 57, column 2 to line 63, column 3)",
  " (in 'factor_model_without_covariates', line 65, column 25 to column 37)",
  " (in 'factor_model_without_covariates', line 65, column 4 to column 37)",
  " (in 'factor_model_without_covariates', line 64, column 23 to line 66, column 3)",
  " (in 'factor_model_without_covariates', line 64, column 2 to line 66, column 3)",
  " (in 'factor_model_without_covariates', line 68, column 2 to column 11)",
  " (in 'factor_model_without_covariates', line 50, column 43 to line 69, column 3)",
  " (in 'factor_model_without_covariates', line 84, column 4 to column 22)",
  " (in 'factor_model_without_covariates', line 85, column 11 to column 12)",
  " (in 'factor_model_without_covariates', line 85, column 4 to line 86, column 46)",
  " (in 'factor_model_without_covariates', line 88, column 11 to column 12)",
  " (in 'factor_model_without_covariates', line 88, column 4 to column 43)",
  " (in 'factor_model_without_covariates', line 89, column 11 to column 12)",
  " (in 'factor_model_without_covariates', line 89, column 14 to column 15)",
  " (in 'factor_model_without_covariates', line 89, column 4 to column 21)",
  " (in 'factor_model_without_covariates', line 92, column 6 to column 32)",
  " (in 'factor_model_without_covariates', line 91, column 4 to line 92, column 32)",
  " (in 'factor_model_without_covariates', line 94, column 4 to column 42)",
  " (in 'factor_model_without_covariates', line 83, column 32 to line 95, column 3)"};
template <typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>>,-1,-1>
make_F(const int& T, const T1__& diagonal_loadings_arg__, const T2__&
       lower_tri_loadings_arg__, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, T3__, stan::base_type_t<T4__>>,-1,-1>
make_beta(const int& J, const T1__& off_arg__, const T2__& lambda_arg__,
          const T3__& eta, const T4__& tau_arg__, std::ostream* pstream__);
template <typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>>,-1,-1>
make_F(const int& T, const T1__& diagonal_loadings_arg__, const T2__&
       lower_tri_loadings_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& diagonal_loadings = stan::math::to_ref(diagonal_loadings_arg__);
  const auto& lower_tri_loadings =
    stan::math::to_ref(lower_tri_loadings_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int L = std::numeric_limits<int>::min();
    current_statement__ = 104;
    L = stan::math::num_elements(diagonal_loadings);
    int M = std::numeric_limits<int>::min();
    current_statement__ = 105;
    M = stan::math::num_elements(lower_tri_loadings);
    current_statement__ = 106;
    stan::math::validate_non_negative_index("F", "T", T);
    current_statement__ = 107;
    stan::math::validate_non_negative_index("F", "L", L);
    Eigen::Matrix<local_scalar_t__,-1,-1> F =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(T, L, DUMMY_VAR__);
    int idx = std::numeric_limits<int>::min();
    current_statement__ = 109;
    idx = 0;
    current_statement__ = 116;
    for (int j = 1; j <= L; ++j) {
      current_statement__ = 110;
      stan::model::assign(F,
        stan::model::rvalue(diagonal_loadings, "diagonal_loadings",
          stan::model::index_uni(j)), "assigning variable F",
        stan::model::index_uni(j), stan::model::index_uni(j));
      current_statement__ = 114;
      for (int i = (j + 1); i <= T; ++i) {
        current_statement__ = 111;
        idx = (idx + 1);
        current_statement__ = 112;
        stan::model::assign(F,
          stan::model::rvalue(lower_tri_loadings, "lower_tri_loadings",
            stan::model::index_uni(idx)), "assigning variable F",
          stan::model::index_uni(i), stan::model::index_uni(j));
      }
    }
    current_statement__ = 120;
    for (int j = 1; j <= (L - 1); ++j) {
      current_statement__ = 118;
      for (int i = (j + 1); i <= L; ++i) {
        current_statement__ = 117;
        stan::model::assign(F, 0, "assigning variable F",
          stan::model::index_uni(j), stan::model::index_uni(i));
      }
    }
    current_statement__ = 121;
    return F;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, T3__, stan::base_type_t<T4__>>,-1,-1>
make_beta(const int& J, const T1__& off_arg__, const T2__& lambda_arg__,
          const T3__& eta, const T4__& tau_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>, T3__,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& off = stan::math::to_ref(off_arg__);
  const auto& lambda = stan::math::to_ref(lambda_arg__);
  const auto& tau = stan::math::to_ref(tau_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int L = std::numeric_limits<int>::min();
    current_statement__ = 123;
    L = stan::math::cols(off);
    current_statement__ = 124;
    stan::math::validate_non_negative_index("cache", "L", L);
    Eigen::Matrix<local_scalar_t__,-1,1> cache =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
    current_statement__ = 125;
    stan::model::assign(cache,
      stan::math::multiply(
        stan::math::tan(
          stan::math::multiply((0.5 * stan::math::pi()), lambda)),
        stan::math::tan(((0.5 * stan::math::pi()) * eta))),
      "assigning variable cache");
    current_statement__ = 126;
    stan::math::validate_non_negative_index("tau_", "J", J);
    Eigen::Matrix<local_scalar_t__,-1,1> tau_ =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
    current_statement__ = 127;
    stan::model::assign(tau_,
      stan::math::tan(stan::math::multiply((0.5 * stan::math::pi()), tau)),
      "assigning variable tau_");
    current_statement__ = 128;
    stan::math::validate_non_negative_index("out", "J", J);
    current_statement__ = 129;
    stan::math::validate_non_negative_index("out", "L", L);
    Eigen::Matrix<local_scalar_t__,-1,-1> out =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, L, DUMMY_VAR__);
    current_statement__ = 132;
    for (int j = 1; j <= J; ++j) {
      current_statement__ = 131;
      stan::model::assign(out,
        stan::math::multiply(
          stan::model::rvalue(off, "off", stan::model::index_uni(j)),
          stan::model::rvalue(tau_, "tau_", stan::model::index_uni(j))),
        "assigning variable out", stan::model::index_uni(j));
    }
    current_statement__ = 133;
    return stan::math::diag_pre_multiply(cache, stan::math::transpose(out));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_factor_model_without_covariates final : public model_base_crtp<model_factor_model_without_covariates> {
private:
  int L;
  int N;
  Eigen::Matrix<double,1,-1> y_treated_pre_data__;
  int J;
  std::vector<Eigen::Matrix<double,1,-1>> y_donors_pre;
  int N_pred;
  std::vector<Eigen::Matrix<double,1,-1>> y_donors_post;
  int T;
  int j_plus_1;
  int M;
  Eigen::Matrix<double,1,-1> j_ones_data__;
  Eigen::Matrix<double,-1,1> t_ones_data__;
  std::vector<Eigen::Matrix<double,1,-1>> y_donors;
  std::vector<Eigen::Matrix<double,1,-1>> y_donors_pre_std;
  std::vector<Eigen::Matrix<double,1,-1>> y_donors_post_std;
  Eigen::Matrix<double,-1,1> mean_y_donors_pre_data__;
  Eigen::Matrix<double,-1,1> sd_y_donors_pre_data__;
  double mean_y;
  double sd_y;
  Eigen::Matrix<double,1,-1> y_std_data__;
  Eigen::Map<Eigen::Matrix<double,1,-1>> y_treated_pre{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,1,-1>> j_ones{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> t_ones{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> mean_y_donors_pre{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sd_y_donors_pre{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,1,-1>> y_std{nullptr, 0};
public:
  ~model_factor_model_without_covariates() {}
  model_factor_model_without_covariates(stan::io::var_context& context__,
                                        unsigned int random_seed__ = 0,
                                        std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_factor_model_without_covariates_namespace::model_factor_model_without_covariates";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 47;
      context__.validate_dims("data initialization", "L", "int",
        std::vector<size_t>{});
      L = std::numeric_limits<int>::min();
      current_statement__ = 47;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "L", L, 2);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 48;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("y_treated_pre", "N", N);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "y_treated_pre",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      y_treated_pre_data__ = Eigen::Matrix<double,1,-1>::Constant(N,
                               std::numeric_limits<double>::quiet_NaN());
      new (&y_treated_pre)
        Eigen::Map<Eigen::Matrix<double,1,-1>>(y_treated_pre_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> y_treated_pre_flat__;
        current_statement__ = 50;
        y_treated_pre_flat__ = context__.vals_r("y_treated_pre");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 50;
          stan::model::assign(y_treated_pre, y_treated_pre_flat__[(pos__ -
            1)], "assigning variable y_treated_pre",
            stan::model::index_uni(sym1__));
          current_statement__ = 50;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 51;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 51;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "J", J, 0);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("y_donors_pre", "J", J);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("y_donors_pre", "N", N);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "y_donors_pre",
        "double",
        std::vector<size_t>{static_cast<size_t>(J), static_cast<size_t>(N)});
      y_donors_pre = std::vector<Eigen::Matrix<double,1,-1>>(J,
                       Eigen::Matrix<double,1,-1>::Constant(N,
                         std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> y_donors_pre_flat__;
        current_statement__ = 54;
        y_donors_pre_flat__ = context__.vals_r("y_donors_pre");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 54;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 54;
            stan::model::assign(y_donors_pre, y_donors_pre_flat__[(pos__ -
              1)], "assigning variable y_donors_pre",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 54;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 55;
      context__.validate_dims("data initialization", "N_pred", "int",
        std::vector<size_t>{});
      N_pred = std::numeric_limits<int>::min();
      current_statement__ = 55;
      N_pred = context__.vals_i("N_pred")[(1 - 1)];
      current_statement__ = 55;
      stan::math::check_greater_or_equal(function__, "N_pred", N_pred, 1);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("y_donors_post", "J", J);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("y_donors_post", "N_pred",
        N_pred);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "y_donors_post",
        "double",
        std::vector<size_t>{static_cast<size_t>(J),
          static_cast<size_t>(N_pred)});
      y_donors_post = std::vector<Eigen::Matrix<double,1,-1>>(J,
                        Eigen::Matrix<double,1,-1>::Constant(N_pred,
                          std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> y_donors_post_flat__;
        current_statement__ = 58;
        y_donors_post_flat__ = context__.vals_r("y_donors_post");
        current_statement__ = 58;
        pos__ = 1;
        current_statement__ = 58;
        for (int sym1__ = 1; sym1__ <= N_pred; ++sym1__) {
          current_statement__ = 58;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 58;
            stan::model::assign(y_donors_post, y_donors_post_flat__[(pos__ -
              1)], "assigning variable y_donors_post",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 58;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 59;
      T = std::numeric_limits<int>::min();
      current_statement__ = 59;
      T = (N + N_pred);
      current_statement__ = 60;
      j_plus_1 = std::numeric_limits<int>::min();
      current_statement__ = 60;
      j_plus_1 = (J + 1);
      current_statement__ = 61;
      M = std::numeric_limits<int>::min();
      current_statement__ = 61;
      M = ((L * (T - L)) + ((L * (L - 1)) / 2));
      current_statement__ = 62;
      stan::math::validate_non_negative_index("j_ones", "j_plus_1", j_plus_1);
      current_statement__ = 63;
      j_ones_data__ = Eigen::Matrix<double,1,-1>::Constant(j_plus_1,
                        std::numeric_limits<double>::quiet_NaN());
      new (&j_ones)
        Eigen::Map<Eigen::Matrix<double,1,-1>>(j_ones_data__.data(),
        j_plus_1);
      current_statement__ = 63;
      stan::model::assign(j_ones, stan::math::rep_row_vector(1, j_plus_1),
        "assigning variable j_ones");
      current_statement__ = 64;
      stan::math::validate_non_negative_index("t_ones", "T", T);
      current_statement__ = 65;
      t_ones_data__ = Eigen::Matrix<double,-1,1>::Constant(T,
                        std::numeric_limits<double>::quiet_NaN());
      new (&t_ones)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(t_ones_data__.data(), T);
      current_statement__ = 65;
      stan::model::assign(t_ones, stan::math::rep_vector(1.0, T),
        "assigning variable t_ones");
      current_statement__ = 66;
      stan::math::validate_non_negative_index("y_donors", "J", J);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("y_donors", "T", T);
      current_statement__ = 68;
      y_donors = std::vector<Eigen::Matrix<double,1,-1>>(J,
                   Eigen::Matrix<double,1,-1>::Constant(T,
                     std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 69;
      stan::math::validate_non_negative_index("y_donors_pre_std", "J", J);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("y_donors_pre_std", "N", N);
      current_statement__ = 71;
      y_donors_pre_std = std::vector<Eigen::Matrix<double,1,-1>>(J,
                           Eigen::Matrix<double,1,-1>::Constant(N,
                             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 72;
      stan::math::validate_non_negative_index("y_donors_post_std", "J", J);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("y_donors_post_std", "N_pred",
        N_pred);
      current_statement__ = 74;
      y_donors_post_std = std::vector<Eigen::Matrix<double,1,-1>>(J,
                            Eigen::Matrix<double,1,-1>::Constant(N_pred,
                              std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 75;
      stan::math::validate_non_negative_index("mean_y_donors_pre", "J", J);
      current_statement__ = 76;
      mean_y_donors_pre_data__ = Eigen::Matrix<double,-1,1>::Constant(J,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&mean_y_donors_pre)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(mean_y_donors_pre_data__.data(),
        J);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("sd_y_donors_pre", "J", J);
      current_statement__ = 78;
      sd_y_donors_pre_data__ = Eigen::Matrix<double,-1,1>::Constant(J,
                                 std::numeric_limits<double>::quiet_NaN());
      new (&sd_y_donors_pre)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sd_y_donors_pre_data__.data(),
        J);
      current_statement__ = 79;
      mean_y = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 79;
      mean_y = stan::math::mean(y_treated_pre);
      current_statement__ = 80;
      sd_y = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 80;
      sd_y = stan::math::sd(y_treated_pre);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("y_std", "N", N);
      current_statement__ = 82;
      y_std_data__ = Eigen::Matrix<double,1,-1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&y_std)
        Eigen::Map<Eigen::Matrix<double,1,-1>>(y_std_data__.data(), N);
      current_statement__ = 82;
      stan::model::assign(y_std,
        stan::math::divide(stan::math::subtract(y_treated_pre, mean_y), sd_y),
        "assigning variable y_std");
      current_statement__ = 89;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 83;
        stan::model::assign(mean_y_donors_pre,
          stan::math::mean(
            stan::model::rvalue(y_donors_pre, "y_donors_pre",
              stan::model::index_uni(j))),
          "assigning variable mean_y_donors_pre", stan::model::index_uni(j));
        current_statement__ = 84;
        stan::model::assign(sd_y_donors_pre,
          stan::math::sd(
            stan::model::rvalue(y_donors_pre, "y_donors_pre",
              stan::model::index_uni(j))),
          "assigning variable sd_y_donors_pre", stan::model::index_uni(j));
        current_statement__ = 85;
        stan::model::assign(y_donors_pre_std,
          stan::math::divide(
            stan::math::subtract(
              stan::model::rvalue(y_donors_pre, "y_donors_pre",
                stan::model::index_uni(j)),
              stan::model::rvalue(mean_y_donors_pre, "mean_y_donors_pre",
                stan::model::index_uni(j))),
            stan::model::rvalue(sd_y_donors_pre, "sd_y_donors_pre",
              stan::model::index_uni(j))),
          "assigning variable y_donors_pre_std", stan::model::index_uni(j));
        current_statement__ = 86;
        stan::model::assign(y_donors_post_std,
          stan::math::divide(
            stan::math::subtract(
              stan::model::rvalue(y_donors_post, "y_donors_post",
                stan::model::index_uni(j)),
              stan::model::rvalue(mean_y_donors_pre, "mean_y_donors_pre",
                stan::model::index_uni(j))),
            stan::model::rvalue(sd_y_donors_pre, "sd_y_donors_pre",
              stan::model::index_uni(j))),
          "assigning variable y_donors_post_std", stan::model::index_uni(j));
        current_statement__ = 87;
        stan::model::assign(y_donors,
          stan::math::append_col(
            stan::model::rvalue(y_donors_pre_std, "y_donors_pre_std",
              stan::model::index_uni(j)),
            stan::model::rvalue(y_donors_post_std, "y_donors_post_std",
              stan::model::index_uni(j))), "assigning variable y_donors",
          stan::model::index_uni(j));
      }
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("raw_b", "T", T);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("raw_c", "j_plus_1", j_plus_1);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("beta_off", "j_plus_1",
        j_plus_1);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("beta_off", "L", L);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("lambda", "L", L);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("tau", "j_plus_1", j_plus_1);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("y_missing", "N_pred", N_pred);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("F_diag", "L", L);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("F_lower", "M", M);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("beta", "L", L);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("beta", "j_plus_1", j_plus_1);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("b", "T", T);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("c", "j_plus_1", j_plus_1);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("synth_out", "T", T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = T + 1 + j_plus_1 + 1 + (j_plus_1 * L) + L + 1 + j_plus_1
      + N_pred + 1 + L + M;
  }
  inline std::string model_name() const final {
    return "model_factor_model_without_covariates";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_factor_model_without_covariates_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> raw_b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 1;
      raw_b = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(T);
      local_scalar_t__ sigma_b = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_b = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,1,-1> raw_c =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(j_plus_1, DUMMY_VAR__);
      current_statement__ = 3;
      raw_c = in__.template read<
                Eigen::Matrix<local_scalar_t__,1,-1>>(j_plus_1);
      local_scalar_t__ sigma_c = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_c = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_off =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(j_plus_1, L,
          DUMMY_VAR__);
      current_statement__ = 5;
      beta_off = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,-1>>(j_plus_1, L);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 6;
      lambda = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1,
                 lp__, L);
      local_scalar_t__ eta = DUMMY_VAR__;
      current_statement__ = 7;
      eta = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(j_plus_1, DUMMY_VAR__);
      current_statement__ = 8;
      tau = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
              j_plus_1);
      Eigen::Matrix<local_scalar_t__,1,-1> y_missing =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N_pred, DUMMY_VAR__);
      current_statement__ = 9;
      y_missing = in__.template read<
                    Eigen::Matrix<local_scalar_t__,1,-1>>(N_pred);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 10;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> F_diag =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 11;
      F_diag = in__.template read_constrain_lb<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                 L);
      Eigen::Matrix<local_scalar_t__,-1,1> F_lower =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 12;
      F_lower = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(M);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(L, j_plus_1,
          DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(beta,
        make_beta(j_plus_1, beta_off, lambda, eta, tau, pstream__),
        "assigning variable beta");
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(b, stan::math::multiply(raw_b, sigma_b),
        "assigning variable b");
      Eigen::Matrix<local_scalar_t__,1,-1> c =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(j_plus_1, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(c, stan::math::multiply(raw_c, sigma_c),
        "assigning variable c");
      {
        current_statement__ = 26;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                         stan::math::to_vector(beta_off)));
        current_statement__ = 27;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(F_diag));
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(F_lower, 0, 2));
        current_statement__ = 29;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(raw_b));
        current_statement__ = 30;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(sigma_b));
        current_statement__ = 31;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(raw_c));
        current_statement__ = 32;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(sigma_c));
        current_statement__ = 33;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(sigma));
        {
          current_statement__ = 34;
          stan::math::validate_non_negative_index("F", "T", T);
          current_statement__ = 35;
          stan::math::validate_non_negative_index("F", "L", L);
          Eigen::Matrix<local_scalar_t__,-1,-1> F =
            Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(T, L,
              DUMMY_VAR__);
          current_statement__ = 36;
          stan::model::assign(F, make_F(T, F_diag, F_lower, pstream__),
            "assigning variable F");
          current_statement__ = 37;
          stan::math::validate_non_negative_index("Y_target", "T", T);
          std::vector<Eigen::Matrix<local_scalar_t__,1,-1>> Y_target =
            std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>(1,
              Eigen::Matrix<local_scalar_t__,1,-1>::Constant(T, DUMMY_VAR__));
          current_statement__ = 39;
          stan::math::validate_non_negative_index("Y_temp", "j_plus_1",
            j_plus_1);
          current_statement__ = 40;
          stan::math::validate_non_negative_index("Y_temp", "T", T);
          std::vector<Eigen::Matrix<local_scalar_t__,1,-1>> Y_temp =
            std::vector<Eigen::Matrix<local_scalar_t__,1,-1>>(j_plus_1,
              Eigen::Matrix<local_scalar_t__,1,-1>::Constant(T, DUMMY_VAR__));
          current_statement__ = 42;
          stan::model::assign(Y_target,
            stan::math::append_col(y_std, y_missing),
            "assigning variable Y_target", stan::model::index_uni(1));
          current_statement__ = 43;
          stan::model::assign(Y_temp,
            stan::math::append_array(Y_target, y_donors),
            "assigning variable Y_temp");
          current_statement__ = 45;
          for (int j = 1; j <= j_plus_1; ++j) {
            current_statement__ = 44;
            lp_accum__.add(stan::math::normal_id_glm_lpdf<propto__>(
                             stan::math::transpose(
                               stan::model::rvalue(Y_temp, "Y_temp",
                                 stan::model::index_uni(j))), F,
                             stan::math::add(b,
                               stan::model::rvalue(c, "c",
                                 stan::model::index_uni(j))),
                             stan::model::rvalue(beta, "beta",
                               stan::model::index_omni(),
                               stan::model::index_uni(j)), sigma));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_factor_model_without_covariates_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> raw_b =
        Eigen::Matrix<double,-1,1>::Constant(T,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      raw_b = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(T);
      double sigma_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma_b = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      Eigen::Matrix<double,1,-1> raw_c =
        Eigen::Matrix<double,1,-1>::Constant(j_plus_1,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      raw_c = in__.template read<
                Eigen::Matrix<local_scalar_t__,1,-1>>(j_plus_1);
      double sigma_c = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma_c = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,-1> beta_off =
        Eigen::Matrix<double,-1,-1>::Constant(j_plus_1, L,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      beta_off = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,-1>>(j_plus_1, L);
      Eigen::Matrix<double,-1,1> lambda =
        Eigen::Matrix<double,-1,1>::Constant(L,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      lambda = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1,
                 lp__, L);
      double eta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      eta = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      Eigen::Matrix<double,-1,1> tau =
        Eigen::Matrix<double,-1,1>::Constant(j_plus_1,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      tau = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
              j_plus_1);
      Eigen::Matrix<double,1,-1> y_missing =
        Eigen::Matrix<double,1,-1>::Constant(N_pred,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      y_missing = in__.template read<
                    Eigen::Matrix<local_scalar_t__,1,-1>>(N_pred);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> F_diag =
        Eigen::Matrix<double,-1,1>::Constant(L,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      F_diag = in__.template read_constrain_lb<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                 L);
      Eigen::Matrix<double,-1,1> F_lower =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      F_lower = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(M);
      Eigen::Matrix<double,-1,-1> beta =
        Eigen::Matrix<double,-1,-1>::Constant(L, j_plus_1,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> b =
        Eigen::Matrix<double,-1,1>::Constant(T,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,1,-1> c =
        Eigen::Matrix<double,1,-1>::Constant(j_plus_1,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(raw_b);
      out__.write(sigma_b);
      out__.write(raw_c);
      out__.write(sigma_c);
      out__.write(beta_off);
      out__.write(lambda);
      out__.write(eta);
      out__.write(tau);
      out__.write(y_missing);
      out__.write(sigma);
      out__.write(F_diag);
      out__.write(F_lower);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 13;
      stan::model::assign(beta,
        make_beta(j_plus_1, beta_off, lambda, eta, tau, pstream__),
        "assigning variable beta");
      current_statement__ = 14;
      stan::model::assign(b, stan::math::multiply(raw_b, sigma_b),
        "assigning variable b");
      current_statement__ = 15;
      stan::model::assign(c, stan::math::multiply(raw_c, sigma_c),
        "assigning variable c");
      if (emit_transformed_parameters__) {
        out__.write(beta);
        out__.write(b);
        out__.write(c);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> synth_out =
        Eigen::Matrix<double,-1,1>::Constant(T,
          std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 17;
        stan::math::validate_non_negative_index("F_", "T", T);
        current_statement__ = 18;
        stan::math::validate_non_negative_index("F_", "L", L);
        Eigen::Matrix<double,-1,-1> F_ =
          Eigen::Matrix<double,-1,-1>::Constant(T, L,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 19;
        stan::model::assign(F_, make_F(T, F_diag, F_lower, pstream__),
          "assigning variable F_");
        current_statement__ = 20;
        stan::math::validate_non_negative_index("Synth_", "T", T);
        current_statement__ = 21;
        stan::math::validate_non_negative_index("Synth_", "j_plus_1",
          j_plus_1);
        Eigen::Matrix<double,-1,-1> Synth_ =
          Eigen::Matrix<double,-1,-1>::Constant(T, j_plus_1,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 22;
        stan::model::assign(Synth_,
          stan::math::add(
            stan::math::add(stan::math::multiply(F_, beta),
              stan::math::multiply(b, j_ones)),
            stan::math::multiply(t_ones, c)), "assigning variable Synth_");
        current_statement__ = 24;
        for (int t = 1; t <= T; ++t) {
          current_statement__ = 23;
          stan::model::assign(synth_out,
            ((stan::math::normal_rng(
                stan::model::rvalue(Synth_, "Synth_",
                  stan::model::index_uni(t), stan::model::index_uni(1)),
                sigma, base_rng__) * sd_y) + mean_y),
            "assigning variable synth_out", stan::model::index_uni(t));
        }
      }
      out__.write(synth_out);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> raw_b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(raw_b,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(T),
        "assigning variable raw_b");
      out__.write(raw_b);
      local_scalar_t__ sigma_b = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_b = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_b);
      Eigen::Matrix<local_scalar_t__,1,-1> raw_c =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(j_plus_1, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(raw_c,
        in__.read<Eigen::Matrix<local_scalar_t__,1,-1>>(j_plus_1),
        "assigning variable raw_c");
      out__.write(raw_c);
      local_scalar_t__ sigma_c = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_c = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_c);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_off =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(j_plus_1, L,
          DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(beta_off,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(j_plus_1, L),
        "assigning variable beta_off");
      out__.write(beta_off);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(lambda,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(L),
        "assigning variable lambda");
      out__.write_free_lub(0, 1, lambda);
      local_scalar_t__ eta = DUMMY_VAR__;
      current_statement__ = 7;
      eta = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, eta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(j_plus_1, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(tau,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(j_plus_1),
        "assigning variable tau");
      out__.write_free_lub(0, 1, tau);
      Eigen::Matrix<local_scalar_t__,1,-1> y_missing =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N_pred, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(y_missing,
        in__.read<Eigen::Matrix<local_scalar_t__,1,-1>>(N_pred),
        "assigning variable y_missing");
      out__.write(y_missing);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 10;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> F_diag =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(F_diag,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(L),
        "assigning variable F_diag");
      out__.write_free_lb(0, F_diag);
      Eigen::Matrix<local_scalar_t__,-1,1> F_lower =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(F_lower,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M),
        "assigning variable F_lower");
      out__.write(F_lower);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "raw_b", "double",
        std::vector<size_t>{static_cast<size_t>(T)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma_b",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "raw_c", "double",
        std::vector<size_t>{static_cast<size_t>(j_plus_1)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma_c",
        "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "beta_off",
        "double",
        std::vector<size_t>{static_cast<size_t>(j_plus_1),
          static_cast<size_t>(L)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "lambda", "double",
        std::vector<size_t>{static_cast<size_t>(L)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "eta", "double",
        std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "tau", "double",
        std::vector<size_t>{static_cast<size_t>(j_plus_1)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "y_missing",
        "double", std::vector<size_t>{static_cast<size_t>(N_pred)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "F_diag", "double",
        std::vector<size_t>{static_cast<size_t>(L)});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "F_lower",
        "double", std::vector<size_t>{static_cast<size_t>(M)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> raw_b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> raw_b_flat__;
        current_statement__ = 1;
        raw_b_flat__ = context__.vals_r("raw_b");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(raw_b, raw_b_flat__[(pos__ - 1)],
            "assigning variable raw_b", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(raw_b);
      local_scalar_t__ sigma_b = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_b = context__.vals_r("sigma_b")[(1 - 1)];
      out__.write_free_lb(0, sigma_b);
      Eigen::Matrix<local_scalar_t__,1,-1> raw_c =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(j_plus_1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> raw_c_flat__;
        current_statement__ = 3;
        raw_c_flat__ = context__.vals_r("raw_c");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= j_plus_1; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(raw_c, raw_c_flat__[(pos__ - 1)],
            "assigning variable raw_c", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(raw_c);
      local_scalar_t__ sigma_c = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_c = context__.vals_r("sigma_c")[(1 - 1)];
      out__.write_free_lb(0, sigma_c);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_off =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(j_plus_1, L,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_off_flat__;
        current_statement__ = 5;
        beta_off_flat__ = context__.vals_r("beta_off");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= j_plus_1; ++sym2__) {
            current_statement__ = 5;
            stan::model::assign(beta_off, beta_off_flat__[(pos__ - 1)],
              "assigning variable beta_off", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 5;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(beta_off);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 6;
        lambda_flat__ = context__.vals_r("lambda");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(lambda, lambda_flat__[(pos__ - 1)],
            "assigning variable lambda", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, lambda);
      local_scalar_t__ eta = DUMMY_VAR__;
      current_statement__ = 7;
      eta = context__.vals_r("eta")[(1 - 1)];
      out__.write_free_lub(0, 1, eta);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(j_plus_1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> tau_flat__;
        current_statement__ = 8;
        tau_flat__ = context__.vals_r("tau");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= j_plus_1; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(tau, tau_flat__[(pos__ - 1)],
            "assigning variable tau", stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, tau);
      Eigen::Matrix<local_scalar_t__,1,-1> y_missing =
        Eigen::Matrix<local_scalar_t__,1,-1>::Constant(N_pred, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> y_missing_flat__;
        current_statement__ = 9;
        y_missing_flat__ = context__.vals_r("y_missing");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N_pred; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(y_missing, y_missing_flat__[(pos__ - 1)],
            "assigning variable y_missing", stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(y_missing);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 10;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> F_diag =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> F_diag_flat__;
        current_statement__ = 11;
        F_diag_flat__ = context__.vals_r("F_diag");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 11;
          stan::model::assign(F_diag, F_diag_flat__[(pos__ - 1)],
            "assigning variable F_diag", stan::model::index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, F_diag);
      Eigen::Matrix<local_scalar_t__,-1,1> F_lower =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> F_lower_flat__;
        current_statement__ = 12;
        F_lower_flat__ = context__.vals_r("F_lower");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 12;
          stan::model::assign(F_lower, F_lower_flat__[(pos__ - 1)],
            "assigning variable F_lower", stan::model::index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(F_lower);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"raw_b", "sigma_b", "raw_c",
                "sigma_c", "beta_off", "lambda", "eta", "tau", "y_missing",
                "sigma", "F_diag", "F_lower"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"beta", "b", "c"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"synth_out"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(T)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(j_plus_1)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(j_plus_1),
                  static_cast<size_t>(L)},
                std::vector<size_t>{static_cast<size_t>(L)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(j_plus_1)},
                std::vector<size_t>{static_cast<size_t>(N_pred)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(L)},
                std::vector<size_t>{static_cast<size_t>(M)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(L),
               static_cast<size_t>(j_plus_1)},
             std::vector<size_t>{static_cast<size_t>(T)},
             std::vector<size_t>{static_cast<size_t>(j_plus_1)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(T)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      param_names__.emplace_back(std::string() + "raw_b" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_b");
    for (int sym1__ = 1; sym1__ <= j_plus_1; ++sym1__) {
      param_names__.emplace_back(std::string() + "raw_c" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_c");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= j_plus_1; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_off" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "eta");
    for (int sym1__ = 1; sym1__ <= j_plus_1; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_pred; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_missing" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "F_diag" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "F_lower" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= j_plus_1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        param_names__.emplace_back(std::string() + "b" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= j_plus_1; ++sym1__) {
        param_names__.emplace_back(std::string() + "c" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        param_names__.emplace_back(std::string() + "synth_out" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      param_names__.emplace_back(std::string() + "raw_b" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_b");
    for (int sym1__ = 1; sym1__ <= j_plus_1; ++sym1__) {
      param_names__.emplace_back(std::string() + "raw_c" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_c");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= j_plus_1; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_off" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "eta");
    for (int sym1__ = 1; sym1__ <= j_plus_1; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_pred; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_missing" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "F_diag" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "F_lower" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= j_plus_1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        param_names__.emplace_back(std::string() + "b" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= j_plus_1; ++sym1__) {
        param_names__.emplace_back(std::string() + "c" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        param_names__.emplace_back(std::string() + "synth_out" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"raw_b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"sigma_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"raw_c\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(j_plus_1) + "},\"block\":\"parameters\"},{\"name\":\"sigma_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_off\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(j_plus_1) + ",\"cols\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(j_plus_1) + "},\"block\":\"parameters\"},{\"name\":\"y_missing\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pred) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"F_diag\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"F_lower\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(L) + ",\"cols\":" + std::to_string(j_plus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(j_plus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"synth_out\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"raw_b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"sigma_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"raw_c\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(j_plus_1) + "},\"block\":\"parameters\"},{\"name\":\"sigma_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_off\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(j_plus_1) + ",\"cols\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(j_plus_1) + "},\"block\":\"parameters\"},{\"name\":\"y_missing\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pred) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"F_diag\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"F_lower\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(L) + ",\"cols\":" + std::to_string(j_plus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(j_plus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"synth_out\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((T + 1) + j_plus_1) + 1) +
      (j_plus_1 * L)) + L) + 1) + j_plus_1) + N_pred) + 1) + L) + M);
    const size_t num_transformed = emit_transformed_parameters * ((((L *
      j_plus_1) + T) + j_plus_1));
    const size_t num_gen_quantities = emit_generated_quantities * (T);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((T + 1) + j_plus_1) + 1) +
      (j_plus_1 * L)) + L) + 1) + j_plus_1) + N_pred) + 1) + L) + M);
    const size_t num_transformed = emit_transformed_parameters * ((((L *
      j_plus_1) + T) + j_plus_1));
    const size_t num_gen_quantities = emit_generated_quantities * (T);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_factor_model_without_covariates_namespace::model_factor_model_without_covariates;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_factor_model_without_covariates_namespace::profiles__;
}
#endif
#endif
