// Generated by rstantools.  Do not edit by hand.

/*
    bsynth is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bsynth is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bsynth.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_model1_gammaOmega_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 65> locations_array__ =
  {" (found before start of program)",
  " (in 'model1_gammaOmega', line 51, column 3 to column 23)",
  " (in 'model1_gammaOmega', line 52, column 3 to column 16)",
  " (in 'model1_gammaOmega', line 53, column 3 to column 20)",
  " (in 'model1_gammaOmega', line 58, column 2 to column 18)",
  " (in 'model1_gammaOmega', line 59, column 2 to column 18)",
  " (in 'model1_gammaOmega', line 72, column 3 to column 20)",
  " (in 'model1_gammaOmega', line 73, column 3 to column 26)",
  " (in 'model1_gammaOmega', line 61, column 4 to column 33)",
  " (in 'model1_gammaOmega', line 60, column 17 to line 62, column 3)",
  " (in 'model1_gammaOmega', line 60, column 2 to line 62, column 3)",
  " (in 'model1_gammaOmega', line 63, column 2 to column 22)",
  " (in 'model1_gammaOmega', line 75, column 6 to column 68)",
  " (in 'model1_gammaOmega', line 74, column 18 to line 76, column 4)",
  " (in 'model1_gammaOmega', line 74, column 3 to line 76, column 4)",
  " (in 'model1_gammaOmega', line 79, column 6 to column 74)",
  " (in 'model1_gammaOmega', line 78, column 23 to line 80, column 4)",
  " (in 'model1_gammaOmega', line 78, column 3 to line 80, column 4)",
  " (in 'model1_gammaOmega', line 67, column 3 to column 23)",
  " (in 'model1_gammaOmega', line 68, column 3 to column 29)",
  " (in 'model1_gammaOmega', line 69, column 3 to column 51)",
  " (in 'model1_gammaOmega', line 22, column 3 to column 18)",
  " (in 'model1_gammaOmega', line 23, column 10 to column 11)",
  " (in 'model1_gammaOmega', line 23, column 3 to column 16)",
  " (in 'model1_gammaOmega', line 24, column 3 to column 18)",
  " (in 'model1_gammaOmega', line 25, column 10 to column 11)",
  " (in 'model1_gammaOmega', line 25, column 12 to column 13)",
  " (in 'model1_gammaOmega', line 25, column 3 to column 18)",
  " (in 'model1_gammaOmega', line 26, column 3 to column 23)",
  " (in 'model1_gammaOmega', line 27, column 10 to column 16)",
  " (in 'model1_gammaOmega', line 27, column 17 to column 18)",
  " (in 'model1_gammaOmega', line 27, column 3 to column 28)",
  " (in 'model1_gammaOmega', line 28, column 19 to column 20)",
  " (in 'model1_gammaOmega', line 28, column 3 to column 25)",
  " (in 'model1_gammaOmega', line 32, column 10 to column 11)",
  " (in 'model1_gammaOmega', line 32, column 13 to column 14)",
  " (in 'model1_gammaOmega', line 32, column 3 to column 23)",
  " (in 'model1_gammaOmega', line 33, column 10 to column 16)",
  " (in 'model1_gammaOmega', line 33, column 18 to column 19)",
  " (in 'model1_gammaOmega', line 33, column 3 to column 33)",
  " (in 'model1_gammaOmega', line 34, column 9 to column 10)",
  " (in 'model1_gammaOmega', line 34, column 2 to column 20)",
  " (in 'model1_gammaOmega', line 35, column 9 to column 10)",
  " (in 'model1_gammaOmega', line 35, column 2 to column 18)",
  " (in 'model1_gammaOmega', line 36, column 2 to column 26)",
  " (in 'model1_gammaOmega', line 37, column 2 to column 22)",
  " (in 'model1_gammaOmega', line 38, column 9 to column 10)",
  " (in 'model1_gammaOmega', line 38, column 2 to column 44)",
  " (in 'model1_gammaOmega', line 39, column 10 to column 11)",
  " (in 'model1_gammaOmega', line 39, column 3 to column 20)",
  " (in 'model1_gammaOmega', line 41, column 4 to column 36)",
  " (in 'model1_gammaOmega', line 40, column 18 to line 42, column 4)",
  " (in 'model1_gammaOmega', line 40, column 3 to line 42, column 4)",
  " (in 'model1_gammaOmega', line 44, column 2 to column 28)",
  " (in 'model1_gammaOmega', line 45, column 2 to column 24)",
  " (in 'model1_gammaOmega', line 46, column 2 to column 48)",
  " (in 'model1_gammaOmega', line 47, column 2 to column 58)",
  " (in 'model1_gammaOmega', line 43, column 18 to line 48, column 2)",
  " (in 'model1_gammaOmega', line 43, column 3 to line 48, column 2)",
  " (in 'model1_gammaOmega', line 52, column 11 to column 12)",
  " (in 'model1_gammaOmega', line 53, column 11 to column 12)",
  " (in 'model1_gammaOmega', line 58, column 9 to column 10)",
  " (in 'model1_gammaOmega', line 59, column 9 to column 10)",
  " (in 'model1_gammaOmega', line 72, column 10 to column 11)",
  " (in 'model1_gammaOmega', line 73, column 10 to column 16)"};
#include <stan_meta_header.hpp>
class model_model1_gammaOmega final : public model_base_crtp<model_model1_gammaOmega> {
private:
  int K;
  Eigen::Matrix<double,-1,1> X1_data__;
  int J;
  Eigen::Matrix<double,-1,-1> X0_data__;
  int T_post;
  Eigen::Matrix<double,-1,-1> X0_pred_data__;
  Eigen::Matrix<double,-1,1> vs_data__;
  Eigen::Matrix<double,-1,-1> X0_std_data__;
  Eigen::Matrix<double,-1,-1> X0_pred_std_data__;
  Eigen::Matrix<double,-1,1> mean_X0_data__;
  Eigen::Matrix<double,-1,1> sd_X0_data__;
  double mean_X1;
  double sd_X1;
  Eigen::Matrix<double,-1,1> X1_std_data__;
  Eigen::Matrix<double,-1,1> vs_std_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> X1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X0{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X0_pred{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> vs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X0_std{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X0_pred_std{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> mean_X0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sd_X0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> X1_std{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> vs_std{nullptr, 0};
public:
  ~model_model1_gammaOmega() {}
  model_model1_gammaOmega(stan::io::var_context& context__, unsigned int
                          random_seed__ = 0, std::ostream*
                          pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_model1_gammaOmega_namespace::model_model1_gammaOmega";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 21;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 21;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("X1", "K", K);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "X1", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      X1_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                    std::numeric_limits<double>::quiet_NaN());
      new (&X1) Eigen::Map<Eigen::Matrix<double,-1,1>>(X1_data__.data(), K);
      {
        std::vector<local_scalar_t__> X1_flat__;
        current_statement__ = 23;
        X1_flat__ = context__.vals_r("X1");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 23;
          stan::model::assign(X1, X1_flat__[(pos__ - 1)],
            "assigning variable X1", stan::model::index_uni(sym1__));
          current_statement__ = 23;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 24;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 24;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "J", J, 0);
      current_statement__ = 25;
      stan::math::validate_non_negative_index("X0", "K", K);
      current_statement__ = 26;
      stan::math::validate_non_negative_index("X0", "J", J);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "X0", "double",
        std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(J)});
      X0_data__ = Eigen::Matrix<double,-1,-1>::Constant(K, J,
                    std::numeric_limits<double>::quiet_NaN());
      new (&X0) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X0_data__.data(), K,
        J);
      {
        std::vector<local_scalar_t__> X0_flat__;
        current_statement__ = 27;
        X0_flat__ = context__.vals_r("X0");
        current_statement__ = 27;
        pos__ = 1;
        current_statement__ = 27;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 27;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 27;
            stan::model::assign(X0, X0_flat__[(pos__ - 1)],
              "assigning variable X0", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 27;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 28;
      context__.validate_dims("data initialization", "T_post", "int",
        std::vector<size_t>{});
      T_post = std::numeric_limits<int>::min();
      current_statement__ = 28;
      T_post = context__.vals_i("T_post")[(1 - 1)];
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "T_post", T_post, 1);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("X0_pred", "T_post", T_post);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("X0_pred", "J", J);
      current_statement__ = 31;
      context__.validate_dims("data initialization", "X0_pred", "double",
        std::vector<size_t>{static_cast<size_t>(T_post),
          static_cast<size_t>(J)});
      X0_pred_data__ = Eigen::Matrix<double,-1,-1>::Constant(T_post, J,
                         std::numeric_limits<double>::quiet_NaN());
      new (&X0_pred)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X0_pred_data__.data(),
        T_post, J);
      {
        std::vector<local_scalar_t__> X0_pred_flat__;
        current_statement__ = 31;
        X0_pred_flat__ = context__.vals_r("X0_pred");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 31;
          for (int sym2__ = 1; sym2__ <= T_post; ++sym2__) {
            current_statement__ = 31;
            stan::model::assign(X0_pred, X0_pred_flat__[(pos__ - 1)],
              "assigning variable X0_pred", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 31;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 32;
      stan::math::validate_non_negative_index("vs", "K", K);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "vs", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      vs_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                    std::numeric_limits<double>::quiet_NaN());
      new (&vs) Eigen::Map<Eigen::Matrix<double,-1,1>>(vs_data__.data(), K);
      {
        std::vector<local_scalar_t__> vs_flat__;
        current_statement__ = 33;
        vs_flat__ = context__.vals_r("vs");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 33;
          stan::model::assign(vs, vs_flat__[(pos__ - 1)],
            "assigning variable vs", stan::model::index_uni(sym1__));
          current_statement__ = 33;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "vs", vs, 0);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("X0_std", "K", K);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("X0_std", "J", J);
      current_statement__ = 36;
      X0_std_data__ = Eigen::Matrix<double,-1,-1>::Constant(K, J,
                        std::numeric_limits<double>::quiet_NaN());
      new (&X0_std)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X0_std_data__.data(), K, J);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("X0_pred_std", "T_post", T_post);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("X0_pred_std", "J", J);
      current_statement__ = 39;
      X0_pred_std_data__ = Eigen::Matrix<double,-1,-1>::Constant(T_post, J,
                             std::numeric_limits<double>::quiet_NaN());
      new (&X0_pred_std)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X0_pred_std_data__.data(),
        T_post, J);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("mean_X0", "J", J);
      current_statement__ = 41;
      mean_X0_data__ = Eigen::Matrix<double,-1,1>::Constant(J,
                         std::numeric_limits<double>::quiet_NaN());
      new (&mean_X0)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(mean_X0_data__.data(), J);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("sd_X0", "J", J);
      current_statement__ = 43;
      sd_X0_data__ = Eigen::Matrix<double,-1,1>::Constant(J,
                       std::numeric_limits<double>::quiet_NaN());
      new (&sd_X0)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sd_X0_data__.data(), J);
      current_statement__ = 44;
      mean_X1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 44;
      mean_X1 = stan::math::mean(X1);
      current_statement__ = 45;
      sd_X1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 45;
      sd_X1 = stan::math::sd(X1);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("X1_std", "K", K);
      current_statement__ = 47;
      X1_std_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                        std::numeric_limits<double>::quiet_NaN());
      new (&X1_std)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(X1_std_data__.data(), K);
      current_statement__ = 47;
      stan::model::assign(X1_std,
        stan::math::divide(stan::math::subtract(X1, mean_X1), sd_X1),
        "assigning variable X1_std");
      current_statement__ = 48;
      stan::math::validate_non_negative_index("vs_std", "K", K);
      current_statement__ = 49;
      vs_std_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                        std::numeric_limits<double>::quiet_NaN());
      new (&vs_std)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(vs_std_data__.data(), K);
      current_statement__ = 52;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 50;
        stan::model::assign(vs_std,
          stan::math::pow(
            stan::math::sd(
              stan::model::rvalue(X0, "X0", stan::model::index_uni(k),
                stan::model::index_omni())), -1),
          "assigning variable vs_std", stan::model::index_uni(k));
      }
      current_statement__ = 58;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 53;
        stan::model::assign(mean_X0,
          stan::math::mean(
            stan::model::rvalue(X0, "X0", stan::model::index_omni(),
              stan::model::index_uni(j))), "assigning variable mean_X0",
          stan::model::index_uni(j));
        current_statement__ = 54;
        stan::model::assign(sd_X0,
          stan::math::sd(
            stan::model::rvalue(X0, "X0", stan::model::index_omni(),
              stan::model::index_uni(j))), "assigning variable sd_X0",
          stan::model::index_uni(j));
        current_statement__ = 55;
        stan::model::assign(X0_std,
          stan::math::divide(
            stan::math::subtract(
              stan::model::rvalue(X0, "X0", stan::model::index_omni(),
                stan::model::index_uni(j)),
              stan::model::rvalue(mean_X0, "mean_X0",
                stan::model::index_uni(j))),
            stan::model::rvalue(sd_X0, "sd_X0", stan::model::index_uni(j))),
          "assigning variable X0_std", stan::model::index_omni(),
          stan::model::index_uni(j));
        current_statement__ = 56;
        stan::model::assign(X0_pred_std,
          stan::math::divide(
            stan::math::subtract(
              stan::model::rvalue(X0_pred, "X0_pred",
                stan::model::index_omni(), stan::model::index_uni(j)),
              stan::model::rvalue(mean_X0, "mean_X0",
                stan::model::index_uni(j))),
            stan::model::rvalue(sd_X0, "sd_X0", stan::model::index_uni(j))),
          "assigning variable X0_pred_std", stan::model::index_omni(),
          stan::model::index_uni(j));
      }
      current_statement__ = 59;
      stan::math::validate_positive_index("w", "J", J);
      current_statement__ = 60;
      stan::math::validate_positive_index("gamma", "K", K);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("Omega", "K", K);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("Gamma", "K", K);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("X1_sim", "K", K);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("X1_pred", "T_post", T_post);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + (J - 1) + (K - 1);
  }
  inline std::string model_name() const final {
    return "model_model1_gammaOmega";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_model1_gammaOmega_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 2;
      w = in__.template read_constrain_simplex<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, J);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 3;
      gamma = in__.template read_constrain_simplex<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, K);
      Eigen::Matrix<local_scalar_t__,-1,1> Omega =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> Gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 10;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 8;
        stan::model::assign(Gamma,
          stan::math::pow(
            stan::model::rvalue(gamma, "gamma", stan::model::index_uni(k)),
            -1), "assigning variable Gamma", stan::model::index_uni(k));
      }
      current_statement__ = 11;
      stan::model::assign(Omega, stan::math::multiply(sigma, Gamma),
        "assigning variable Omega");
      {
        current_statement__ = 18;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma, 0, 1));
        current_statement__ = 19;
        lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(gamma, vs_std));
        current_statement__ = 20;
        lp_accum__.add(stan::math::normal_lpdf<false>(X1_std,
                         stan::math::multiply(X0_std, w), Omega));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_model1_gammaOmega_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      sigma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> w =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      w = in__.template read_constrain_simplex<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, J);
      Eigen::Matrix<double,-1,1> gamma =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      gamma = in__.template read_constrain_simplex<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, K);
      Eigen::Matrix<double,-1,1> Omega =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> Gamma =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(sigma);
      out__.write(w);
      out__.write(gamma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 10;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 8;
        stan::model::assign(Gamma,
          stan::math::pow(
            stan::model::rvalue(gamma, "gamma", stan::model::index_uni(k)),
            -1), "assigning variable Gamma", stan::model::index_uni(k));
      }
      current_statement__ = 11;
      stan::model::assign(Omega, stan::math::multiply(sigma, Gamma),
        "assigning variable Omega");
      if (emit_transformed_parameters__) {
        out__.write(Omega);
        out__.write(Gamma);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> X1_sim =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> X1_pred =
        Eigen::Matrix<double,-1,1>::Constant(T_post,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      for (int i = 1; i <= K; ++i) {
        current_statement__ = 12;
        stan::model::assign(X1_sim,
          ((stan::math::normal_rng(
              stan::math::multiply(
                stan::model::rvalue(X0_std, "X0_std",
                  stan::model::index_uni(i), stan::model::index_omni()), w),
              sigma, base_rng__) * sd_X1) + mean_X1),
          "assigning variable X1_sim", stan::model::index_uni(i));
      }
      current_statement__ = 17;
      for (int j = 1; j <= T_post; ++j) {
        current_statement__ = 15;
        stan::model::assign(X1_pred,
          ((stan::math::normal_rng(
              stan::math::multiply(
                stan::model::rvalue(X0_pred_std, "X0_pred_std",
                  stan::model::index_uni(j), stan::model::index_omni()), w),
              sigma, base_rng__) * sd_X1) + mean_X1),
          "assigning variable X1_pred", stan::model::index_uni(j));
      }
      out__.write(X1_sim);
      out__.write(X1_pred);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(w,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable w");
      out__.write_free_simplex(w);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(gamma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable gamma");
      out__.write_free_simplex(gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "w", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> w_flat__;
        current_statement__ = 2;
        w_flat__ = context__.vals_r("w");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(w, w_flat__[(pos__ - 1)],
            "assigning variable w", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(w);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma_flat__;
        current_statement__ = 3;
        gamma_flat__ = context__.vals_r("gamma");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(gamma, gamma_flat__[(pos__ - 1)],
            "assigning variable gamma", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"sigma", "w", "gamma"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"Omega", "Gamma"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"X1_sim", "X1_pred"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(K)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(K)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(T_post)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "w" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "Omega" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "Gamma" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "X1_sim" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= T_post; ++sym1__) {
        param_names__.emplace_back(std::string() + "X1_pred" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= (J - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "w" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "Omega" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "Gamma" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "X1_sim" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= T_post; ++sym1__) {
        param_names__.emplace_back(std::string() + "X1_pred" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"Omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"X1_sim\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"X1_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T_post) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((J -1)) + "},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((K -1)) + "},\"block\":\"parameters\"},{\"name\":\"Omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"X1_sim\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"X1_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T_post) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + J) + K);
    const size_t num_transformed = emit_transformed_parameters * ((K + K));
    const size_t num_gen_quantities = emit_generated_quantities * ((K +
      T_post));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + J) + K);
    const size_t num_transformed = emit_transformed_parameters * ((K + K));
    const size_t num_gen_quantities = emit_generated_quantities * ((K +
      T_post));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_model1_gammaOmega_namespace::model_model1_gammaOmega;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_model1_gammaOmega_namespace::profiles__;
}
#endif
#endif
